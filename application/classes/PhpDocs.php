<?php
/**
 *
 * @package DevUtils
 */
namespace SledgeHammer;
class PhpDocs extends Object implements Command {

	private
		$object; // Module of Project

	function __construct($object) {
		$this->object = $object;
	}

	function  generateContent() {
		$url = URL::info();
		$base_url = $url['scheme'].'://'.$url['host'].$url['path'];
		$target_path = PhpDocs::documentation_path($this->object);
		//getDocument()->title = 'API Documentation - '.$this->object->name;
		Breadcrumbs::add('API Documenation');

		if (!empty($_GET['generate_docs'])) { // Moet er documentation gegenereerd worden?
			if ($_GET['generate_docs'] == 'splash') {
				// Show "please wait" and generate the docs
				return new MessageBox(WEBROOT.'mvc/icons/MessageBox/spinner.gif', 'Generating documentation', 'Please wait... <meta http-equiv="refresh" content="0;URL='.$base_url.'?generate_docs=real">');
			} 
			$result = $this->generate_docs($target_path);
			if ($result === true) { // Is het genereren misukt?
				redirect($base_url); // Toon de documentatie
			} else {
				return $result; // Toon de log
			}
		}
		// Controleer of er reeds documentatie gegenereerd is
	 	if (!file_exists($target_path.'index.html')) { // No generated documentation found?
			$Dialog = new DialogBox('warning', 'Documentation not generated', 'Do you want to generate the documentation now?', array(
				'generate' => array('icon' => WEBROOT.'icons/continue.png', 'label'=> 'Generate documentation')
			));
			$answer = $Dialog->import($errors);
			if ($answer == 'generate') {
				redirect($base_url.'?generate_docs=splash');
				return;
			}
			// Toon dialoog waarmee je de documentatie generator kan starten
			return $Dialog;
		}

		$documentation_age = $this->documentation_age() / 3600; // leeftijd in uur
		if ($documentation_age > 8) {
			$age = round($documentation_age / 24).' days '.round($documentation_age % 24).' hours';
		} else {
			$age = round($documentation_age, 1).' hours';
		}
		// Toon de gegenereerde documentatie
		return new Template('phpdocs.html', array(
			'src' => $GLOBALS['VirtualFolder']->getPath(true).'phpdocs/index.html',
			'age' => $age,
			'regenerateUrl' => $base_url.'?generate_docs=splash'
		), array(
			'title' => 'API Documentation',
		));
	}

	/**
	 * Geeft de map terug waar de gegenereerde documentatie wordt opgeslagen
	 *
	 * @param Module|Project $object
	 */
	static function documentation_path($object) {
		$type = strtolower(get_class($object));
		return PATH.'tmp/phpdocs/'.$type.'/'.$object->identifier.'/';
	}

	/**
	 * @return int het aantal seconden dat de documentatie oud is
	 */
	function documentation_age() {
		$target_path = PhpDocs::documentation_path($this->object);
		if (!file_exists($target_path.'index.html')) {
			return true;
		}
		$time = filectime($target_path.'index.html');
		return (time() - $time); 
	}

	function generate_docs($target_path) {
		// module of project instellingen laden
		$source_path = $this->object->path;

		$directories = array();
		$files = array();

		$type = strtolower(get_class($this->object));
		switch ($type) {

			case 'module':
				$directories[] = $source_path.'classes';
				$files[] = $source_path.'init.php';
				$files[] = $source_path.'functions.php';
				break;

			case 'project':
				$directories[] = $source_path.'application/classes';
				$files[] = $source_path.'application/init.php';
				$files[] = $source_path.'application/functions.php';
				foreach ($this->object->modules as $Module) {
					$directories[] = $Module->path.'classes';
					$files[] = $Module->path.'init.php';
					$files[] = $Module->path.'functions.php';
				}
				break;

			default:
				error('Unknown type: '.$type);

		}
		// PhpDocumentor ini-file genereren
		$phpdocs_ini = ";; Generated by dev_utils PhpDocs.php\n\n";
		$phpdocs_ini .= "sourcecode = off\n";
		$phpdocs_ini .= "output = HTML:frames:DOM/earthli\n\n";
//		$phpdocs_ini .= "output = HTML:Smarty:PHP\n\n";
		$phpdocs_ini .= 'target = '.$target_path."\n";
		$phpdocs_ini .= 'directory = '.implode(',', $directories)."\n";
		$phpdocs_ini .= 'filename = '.implode(',', $files)."\n";

		mkdirs($target_path);
		file_put_contents($target_path.'dev_utils.ini', $phpdocs_ini);

		// PhpDocumentor draaien
		$url = 'http://'.URL::info('host').str_replace('%2F', '/', rawurlencode(WEBPATH)).'phpdocumentor/docbuilder/builder.php?interface=web&dataform=true&setting_useconfig='.urlencode($target_path.'dev_utils');
		$phpdocs_output = file_get_contents($url);
		if (file_exists($target_path.'index.html') && strpos($phpdocs_output, '<h1>Operation Completed!!</h1>')) {
			return true;
		} else {
			return new HTML('<a href="'.$url.'">Retry</a><br /><br />'.$phpdocs_output);
		}
	}
}
?>
